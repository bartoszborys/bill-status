@model BillStatus.Models.NewBillTypeDetails

@{
    ViewData["Title"] = "Create";
}

<h1>Utwórz nowy rodzaj opłaty</h1>
<h6>Uzupełnij formularz, dodająć nazwę rachunku oraz jego składowe, a następnie wciśnij przycisk zapisz.</h6>
<hr />
<div class="row">
    <tr class="col-md-4">
        <form class="bill-type-form  w-100" asp-action="Create">
            <div class="form-group">
                <input id="addBillPricePart" type="button" value="Dodaj częściową opłate" class="btn btn-success" />
                <input type="submit" onclick="document.querySelector('.bill-type-form').reportValidity()" value="Zapisz" class="btn btn-primary" />
            </div>
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label asp-for="Type.Name" class="control-label"></label>
                <input required asp-for="Type.Name" class="form-control" />
                <span asp-validation-for="Type.Name" class="text-danger"></span>
            </div>
            <table class="table table-striped">
                <thead class="thead-dark">
                    <tr>
                        <th scope="col">Nazwa</th>
                        <th scope="col">Wartość</th>
                        <th scope="col">Stała</th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody class="bill-type-form__price-parts-container">
                    <tr class="form-group bill-type-form__bill-type bill-type-form__bill-type--root">
                        <td>
                            @Html.TextBoxFor(model => model.PriceParts[0].Name, new { @class = "form-control", type = "text", required = "required" })
                        </td>
                        <td>
                            @Html.TextBoxFor(model => model.PriceParts[0].Value, new { @class = "form-control", type = "number", required = "required", min = 0})
                        </td>
                        <td>
                            @Html.CheckBoxFor(model => model.PriceParts[0].Constant, new { @class = "form-control form-control-custom" })
                        </td>
                        <td>
                            <input type="button" value="Usuń" class="form-control btn btn-sm btn-danger invisible bill-type-form__remove-button" />
                        </td>
                    </tr>
                </tbody>
            </table>
        </form>
    </div>
</div>
@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script type="text/javascript">
        jQuery("#addBillPricePart").on("click", () => {
            const pricePartsContainer = jQuery('.bill-type-form__price-parts-container');
            const pricePartRoot = jQuery('.bill-type-form__bill-type--root');
            const newFormIndex = pricePartsContainer.get(0).childElementCount;

            const nativeRoot = pricePartRoot.clone();
            [...(nativeRoot.get(0).querySelectorAll("input"))].forEach((item, index) => this.setItemIndex(item, newFormIndex));

            const removePartButton = nativeRoot.find('.bill-type-form__remove-button');
            removePartButton.removeClass("invisible");
            removePartButton.click(
                event => {
                    const parentContainer = removePartButton.parent().parent().get(0)
                    const nativeRootPricePartsContainer = pricePartsContainer.get(0);
                    const nativePricePartsContainers = [...(nativeRootPricePartsContainer.children)];
                    let degrade = false;
                    nativePricePartsContainers.forEach((item, containerIndex) => {
                        if (degrade) {
                            [...(item.querySelectorAll("input"))].forEach(inputItem => this.setItemIndex(inputItem, containerIndex - 1))
                        }

                        if (containerIndex == nativePricePartsContainers.indexOf(parentContainer)) {
                            nativeRootPricePartsContainer.removeChild(item)
                            degrade = true;
                        }
                    });
                }
            )
            
            const pricePartContainer = jQuery('<tr class="form-group bill-type-form__bill-type"></tr>')
            pricePartContainer.append(nativeRoot.children());
            pricePartsContainer.append(pricePartContainer);
        });

        function setItemIndex(item, toIndex) {
            if (!(item instanceof HTMLInputElement)) {
                return item;
            }

            item.name = item.name.replace(/\d/, `${toIndex}`);
            item.id = item.id.replace(/\d/, `${toIndex}`);
            return item;
        }

    </script>
}